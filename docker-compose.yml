version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: multimodal-postgres
    environment:
      POSTGRES_DB: multimodal_edu
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: multimodal-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: multimodal-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbitmq}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: multimodal-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio123}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: multimodal-api-gateway
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-postgres}@postgres:5432/multimodal_edu
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis}@redis:6379
      RABBITMQ_URL: amqp://admin:${RABBITMQ_PASSWORD:-rabbitmq}@rabbitmq:5672
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "3000:3000"
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules
    command: npm run dev

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: multimodal-user-service
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-postgres}@postgres:5432/multimodal_edu
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis}@redis:6379
      RABBITMQ_URL: amqp://admin:${RABBITMQ_PASSWORD:-rabbitmq}@rabbitmq:5672
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./services/user-service:/app
      - /app/node_modules

  # Agent Orchestrator
  agent-orchestrator:
    build:
      context: ./services/agent-orchestrator
      dockerfile: Dockerfile
    container_name: multimodal-agent-orchestrator
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3002
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-postgres}@postgres:5432/multimodal_edu
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis}@redis:6379
      RABBITMQ_URL: amqp://admin:${RABBITMQ_PASSWORD:-rabbitmq}@rabbitmq:5672
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./services/agent-orchestrator:/app
      - /app/node_modules

  # Learning Analytics Service
  learning-analytics:
    build:
      context: ./services/learning-analytics
      dockerfile: Dockerfile
    container_name: multimodal-learning-analytics
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3003
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-postgres}@postgres:5432/multimodal_edu
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis}@redis:6379
      RABBITMQ_URL: amqp://admin:${RABBITMQ_PASSWORD:-rabbitmq}@rabbitmq:5672
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./services/learning-analytics:/app
      - /app/node_modules

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: multimodal-frontend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3000}
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  minio_data:

networks:
  default:
    name: multimodal-network
